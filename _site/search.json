[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "pacman::p_load(corrplot, tidyverse, ggstatsplot)\n\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding Ternary Plot with R\n\npacman::p_load(ggtern, plotly, tidyverse)\n\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\nRows: 108126 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): PA, SZ, AG\ndbl (2): Year, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population) %>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)\n\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n\nNo scatterternary mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\nBuilding Heatmap for Visualising and Analysing Multivariate Data\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nrow.names(wh) <- wh$Country\n\nWarning: Setting row names on a tibble is deprecated.\n\n\n\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)\n\n\nheatmaply(mtcars)\n\n\n\n\n\n\n\nCreating Parallel Coordinates Plots with R\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhistoVisibility <- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03.html",
    "title": "In-class Exercise",
    "section": "",
    "text": "Installing and loading R packages\nTwo packages will be installed and loaded. They are tidyverse and ggiraph.\n\npacman::p_load(ggiraph, tidyverse)\n\nImporting data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "pacman::p_load(plotly, DT, patchwork, tidyverse, ggstatsplot, readxl, performance, parameters, see)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE) #<<\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\nggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"p\",\n  messages = FALSE\n)\n\n\n\n\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE,\n  )\n\n\n\n\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n <- check_normality(model1)\nplot(check_n)\n\n\n\n\n\nmy_sum <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VA1",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Creating an age-sex pyramid that illustrates Singapore’s demographic structure by age cohort and gender using Tableau. Our data source is the Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022. You can find the data set at Singstat."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#cleaning-the-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#cleaning-the-data",
    "title": "Take Home Exercise 1",
    "section": "5.1 Cleaning the data",
    "text": "5.1 Cleaning the data\n\n\n\n\n\n\n\n\nNo.\nStep\nScreenshot\n\n\n\n\n1\nLoad the ‘Singapore Residents by Planning Area Subzone Age Group Sex and Type of Dwelling June 2022.csv’ file into Tableau Desktop\n\n\n\n2\nClick on ‘Cleaned with Data Interpreter’ to clean the dataset\n\n\n\n3\nSelect both ‘2022(Female)’ & ‘2022(Male)’\n\n\n\n4\nDrag selection into empty space to append both tables\n\n\n\n5\nClick ‘Add’ Filters to add the following filters on dataset.\nClick on ‘Add’ & select a field to filter.\nClick on ‘All’ and unselect for those to exclude.\nClick ‘OK’ once done.\n\n\n\n\n\n\n\n6\nRight-click on ‘Sheet’ column and select Split. This is to split this column into two columns - one column containing before the delimiter () and one column containing inside the delimiter ()\n\n\n\n\n7\nRight click on ‘Sheet - Split 1’ to rename this to ‘Gender’\n\n\n\n\n8\nHide Sheet, Table Name, 2022"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#create-calculated-fields-parameters",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#create-calculated-fields-parameters",
    "title": "Take Home Exercise 1",
    "section": "5.2 Create Calculated Fields & Parameters",
    "text": "5.2 Create Calculated Fields & Parameters\nGo to Sheet 1 for the following steps.\n\n\n\n\n\n\n\n\nNo.\nStep\nScreenshot\n\n\n\n\n1\nRight click on the empty spaces and click on ‘Create Parameter’.\nCreate the following Parameter called ‘Total Columns’ and include current value = 3, data type = Integer\n\n\n\n\n2\nRight click on the empty spaces and click on ‘Create Calculated Field’.\nCreate the following calculated field according to the formula as screenshot:\n\nFemale\nMale\nColumn\nRow\nIndex"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#create-visualization",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#create-visualization",
    "title": "Take Home Exercise 1",
    "section": "5.3 Create Visualization",
    "text": "5.3 Create Visualization\n\n\n\n\n\n\n\n\nNo.\nStep\nScreenshot\n\n\n\n\n1\nClick and Drop both Column & Row into Columns and Rows Respectively\n\n\n\n2\nRight click on Column and select ‘Discrete’. Repeat the same for Row.\n\n\n\n3\nDrag Male, Female & Age Group into columns and rows as per screenshot. Note that Male should be on the left and Female should be on the right.\n\n\n\n4\nDrag both ‘Index’ and ‘Planning Area’ into ‘Detail’ under Marks\n\n\n\n5\nRight-click on Column and select Compute Using > Planning Area. Repeat the same steps for Row.\n\n\n\n6\nRight click on ‘Male’ Axis and select Edit Axis. Check Reversed.\n\n\n\n\n7\nDrag Planning Area to Filters. Click on ‘Top’ then select ‘By field:’. Change to Top 9 by population and click on Ok\n\n\n\n8\nRight click on Column and uncheck ‘Show Header’. Repeat the same for Row\n\n\n\n9\nRight click on ‘Age Group’ and select sort. Select Sort by ‘Data source order’ & Descending.\n\n\n\n\n10\nSelect SUM(Female) under Marks, and click on ‘Color’. Select the color for Female population\n\n\n\n11\nRight click on SUM(Male) and uncheck Show Header.\n\n\n\n12\nClick on SUM(Male) in Marks, then drag Male into Label. Do the same for Female.\nDo the following formatting:\n\nMale: Tableau Book, 8pt, hex code: #00007f\nFemale: Tableau Book, 8pt, hex code: #63445b\n\n\n\n\n\n13\nRight click on Age Group and select Format.\nSelect Shading colour: #e6e6e6\nand Alignment: Center\n\n\n\n\n14\nSelect a bar from one trellis. Right click on the bar and select Annotate > Mark\n\n\n\n15\nType the following in the Annotation and click on OK.\n\n\n\n16\nSelect the annotation and select Shading: None, Line: None. Repeat step 15 - 16 for all trellis. Drag each annotation box to top left corner of the trellis.\n\n\n\n17\nRename Sheet 1 to ‘Singapore Population Pyramid’\n\n\n\n18\nRight click on Title and click on Edit Title.\nFormatting:\nHeader (Tableau Semibold, 16 & bold)\nSub-Header (Tableau Light, 12)\nFemale & Male to color code same as font color"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "We will complete this take-home exercise based on a classmate’s take-home exercise 1 submission using Tableau. We will critique the peer submission in terms of clarity and aesthetics. Following that, we will rework the original design using the data visualization principles and best practices we learned in Lesson 1 and 2.\nSingstats datasets are downloaded for take-home exercises 1 and 2. We will use ggplot2 and its extensions to visualize this take-home exercise."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#critique",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#critique",
    "title": "Take-home Exercise 2",
    "section": "2.1 Critique",
    "text": "2.1 Critique\n\nClarity\n\n(a) Reverse formatting of Y-Axis:\nThe sequence of age-group was reversed (e.g. Top X-Axis Age Groups started from “0-4”, then “5-9” and “90 & Over” at the bottom), which could lead to misinterpretation of the graph as it is challenging for the user to interpret the pyramid overall shape at first glance. This is because the common sequence of age-groups is from oldest to youngest, and when the sequence is reversed, it can be difficult for the user to interpret the graph.\n\n\n(b) Unclear visualization title:\nThe task was to focus on 9 planning areas of Singapore, with breakdown by age group & gender. However, both essential components such as “Age Group” and “Gender” were not reflected in the original title “Singapore population distribution by age”. This can lead to confusion and misunderstanding of the scope of analysis as the title does not accurately reflect the key components of the analysis. Furthermore, without specifying the essential components, it is difficult to draw meaningful conclusions from the data. To better reflect the scope of the analysis, the title should be amended to “Population variation of Age and gender in the 9 most populated planning areas in Singapore”.\n\n\n(c) Redundant X-Axis:\nAs the male and female population are both colored differently in the chart, there is no need to add individual X-Axis for each graph in the trellis. We could add a legend in place of it. This would simplify the chart and make the chart more visually appealing since it would be less cluttered.\n\n\n(d) Inconsistent X-Axis across Planning Area & Gender:\nThere are different ranges for each X-axis for each planning area and gender. For instance, Jurong West may range from 0 to 60k, while Hougang may range from 0 to 45k. Having different X-Axis range for each planning area and gender will cause their values to appear greater or lesser than they actually are, thus skewing the results of the comparison. To ensure accurate comparison, the X-Axis range should be standardized across all planning areas and genders.\n\n\n(e) Absences of source:\nNo recognition of the data source nor author.\n\n\n\nAesthetics\n\n(f) Colours of Bar Chart is not purposeful:\nAlthough visually appealing, gradient colors in the graph convey little additional information to the reader. The use of gradient colors in a graph can be distracting and make it difficult for a reader to quickly identify the most significant points. Maximum population count for each planning area & gender can be highlighted to draw attention to points of interest.\n\n\n(g) Arrangement of planning areas is not purposeful:\nCurrently, the arrangement of the planning areas is in alphabetical order. We should arrange the planning areas with the highest population counts at the top left of the trellis, and the lowest population counts at the bottom right. It will also help with readability, as viewers will be able to quickly identify the most populated areas and compare their populations with the least populated areas."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#proposed-design",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#proposed-design",
    "title": "Take-home Exercise 2",
    "section": "2.2 Proposed Design",
    "text": "2.2 Proposed Design\n\n\nAdvantages:\n\n(a) Correct Ordering of Y-Axis:\nFollowing the traditional layout of population pyramid, the age groups will be arranged in a descending order.\n\n\n(b) Clear Title:\nTitle of Chart “Population variation of Age and gender in the 9 most populated planning areas in Singapore” will highlight key components that will be reflected in the chart.\n\n\n(c) Removing X-Axis to be less cluttered\n\n\n(d) Consistent X-Axis across Planning Areas & Gender for easy comparison\n\n\n(e) Include recognition of data source and author\n\n\n(f) Usage of colours to showcase insights\nHighlighted bar with maximum population count across planning areas & gender"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-preparation",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-preparation",
    "title": "Take-home Exercise 2",
    "section": "3.1 Data Preparation",
    "text": "3.1 Data Preparation\n\ni) “SGPopulation” dataframe creation\n\nRemove Subzone and TypeofDwelling columns;\nSubstitute the following AgeGroup labels:\n\n“5_to_9” into “05_to_09”\n“0_to_4” into “00_to_04”\n\nCreate “SGPopulation” dataframe for each Planning Area, group by Age Group, Sex:\n\nSGPopulation <- SGPopulation_June2022\nSGPopulation = select(SGPopulation_June2022, -2, -5)\nSGPopulation$AgeGroup[SGPopulation$AgeGroup==\"5_to_9\"] <- \"05_to_09\"\nSGPopulation$AgeGroup[SGPopulation$AgeGroup==\"0_to_4\"] <- \"00_to_04\"\nSGPopulation <- SGPopulation %>%\n  group_by(PlanningArea, AgeGroup, Sex) %>%\n  summarise_all(sum)\n\nii) Choosing the Top 9 Planning Areas in Singapore with the Highest Population\nThe following step is to identify the top 9 planning areas based on the highest population by Age Group and Gender. The top 9 planning areas are:\n\nSGPopulation_Top9 <- SGPopulation %>%\n  group_by(PlanningArea) %>%\n  summarise_at(vars(Pop), sum) %>%\n  arrange(desc(Pop))\n\nTop9 <- (SGPopulation_Top9[1:9,1])\n\nTop9\n\n# A tibble: 9 × 1\n  PlanningArea \n  <chr>        \n1 Bedok        \n2 Tampines     \n3 Jurong West  \n4 Sengkang     \n5 Woodlands    \n6 Hougang      \n7 Yishun       \n8 Choa Chu Kang\n9 Punggol      \n\n\nWe will now select these 9 planning areas from the SGPopulation dataframe.\n\nSGPopulation <- subset(SGPopulation, PlanningArea == \"Bedok\" | PlanningArea == \"Tampines\" | PlanningArea == \"Jurong West\" | PlanningArea == \"Sengkang\" | PlanningArea == \"Woodlands\" | PlanningArea == \"Hougang\" | PlanningArea == \"Yishun\" | PlanningArea == \"Choa Chu Kang\" | PlanningArea == \"Punggol\")\n\niii) “Male_SGPopulation” and “Female_SGPopulation” dataframe creation\nWe will produce the dataframes “Male_SGPopulation” and “Female_SGPopulation” using the dplyr function filter().\nWe also utilize the mutate() function to set the values of “Female_SGPopulation” to negative. This way, both “Male_SGPopulation” and “Female_SGPopulation” barcharts can be reflected onto the same chart.\n\nMale_SGPopulation <- SGPopulation %>%\n  filter(., Sex=='Male') \n\nFemale_SGPopulation <- SGPopulation %>%\n  filter(., Sex=='Female') %>%\n      mutate(., Pop = Pop*-1)\n\niv) Creation of “Rank” column in both “Male_SGPopulation” and “Female_SGPopulation” dataframes\nNext, we organized the population by Planning Areas and Gender and rank them in descending order.\n\nMale_SGPopulationranked <- Male_SGPopulation %>% arrange(PlanningArea, Pop) %>%\n    group_by(PlanningArea) %>%\n    mutate(rank = rank(-Pop))\n\nFemale_SGPopulationranked <- Female_SGPopulation %>% arrange(PlanningArea, Pop) %>%\n    group_by(PlanningArea) %>%\n    mutate(rank = rank(Pop))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-visualization",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-visualization",
    "title": "Take-home Exercise 2",
    "section": "3.2 Data Visualization",
    "text": "3.2 Data Visualization\nThe steps below will be used to generate our Age-Sex pyramid in ggplot2:\n\nInserting geom_bar() for “Male_SGPopulationranked” and “Female_SGPopulationranked” respectively;\nSetting continuous y-axis scale using scale_y_continuous();\nCustomised a function for the “label” parameter to transform the negative Female population values back to positive;\nCustomised a function for the “fill” parameter to color maximum population bar as yellow;\nFlipping co-ordinates using coord_flip();\nInserting data labels, data source and legends;\nApplied facet_wrap to generate plots of the different subset of the data (in this case, the 9 most highly populated Plannng Areas identified);"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "In this exercise, we are required to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#time-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#time-analysis",
    "title": "Take-home Exercise 3",
    "section": "4.1 Time Analysis",
    "text": "4.1 Time Analysis\nBy plotting both resale volume and resale price over time, we can see how the HDB prices varies across Year 2022.\nWe group the dataset by month and aggregate by average price:\n\nSGResale_2022_bymonth <- SGResale_2022 %>%\n  group_by(month) %>% \n  mutate(average_price = mean(resale_price))\n\nPlotting both axis on the same graph:\n\n ggplot(data = SGResale_2022_bymonth) +\n  # Plot the price\n  geom_bar(mapping = aes(x=month), fill=\"khaki2\") +\n  # Change position of price\n  geom_point(mapping = aes(x=month, y=average_price/300), color = \"royalblue4\") +\n  geom_line(mapping = aes(x=month, y=average_price/300), group = 1, color = \"royalblue4\") +\n  # Add a second Y axis\n  scale_y_continuous(sec.axis = sec_axis(~.*300, name = \"Resale price (SGD)\", labels = comma)) +\n  \n  # Change color of the second Y axis to match with the color of resale price\n  theme_minimal() +\n  theme(axis.ticks.y.right = element_line(color = \"royalblue4\"),\n        axis.text.y.right = element_text(color = \"royalblue4\"), \n        axis.title.y.right = element_text(color = \"royalblue4\")) +\n  \n  # Adjust styles, lables and add title\n  theme(axis.text.x=element_text(angle = 35)) +\n  labs(title = \"HDB resale market in Year 2022\", y=\"Resale volume\", \n       x = \"Month\", caption = \"Source of data: Singapore Housing and Development Board\")\n\n\n\n\nWe observe that the overall resale price for HDB resale market is around the same throughout 2022. However, there was a huge spike in Sept and dropped further in Oct. This may be due to the cooling measure announced by the government which took immediate effect on 30 September 2022."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#flat-type-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#flat-type-analysis",
    "title": "Take-home Exercise 3",
    "section": "4.2 Flat Type Analysis",
    "text": "4.2 Flat Type Analysis\nNext, we plot boxplot by quarter and across flat type to see how prices fluctuated in the last year for different flat types.\n\nSGResale_2022_byflat <- SGResale_2022 %>%\n  group_by(flat_type) %>% \n  mutate(quarter = quarter(ym(month)),\n         price_per_sqm = resale_price/floor_area_sqm)\n\n\nggbetweenstats(\n  data = SGResale_2022_byflat,\n  x = flat_type,\n  y = price_per_sqm,\n  type = \"np\",\n  plot.type = \"boxviolin\",\n  title = \"HDB resale prices in 2022 by flat type\",\n  xlab = \"Flat type\",\n  ylab =\"Price per sqm (SGD)\")\n\n\n\n\nThe overall p-value of the ANOVA test between Type of Flat and Resale Price per sqm is 0.00 < 0.05, which suggests that we can reject the null hypotheses. This means that each flat type has a different mean resale price.\n\nggplot(data = SGResale_2022_byflat, mapping = aes(x = flat_type, y = price_per_sqm)) +\n   geom_boxplot(color = \"black\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"A\") +\n  # Adjust lables and add title\n  labs(title = \"HDB resale prices in 2022 by flat type\", y=\"Price per square metre (SGD)\",\n       x = \"Flat type\", caption = \"Source of data: Singapore Housing and Development Board\")\n\n\n\n\nWe observe that the price per square metre for 5 Room is the lowest. Interestingly, 4 Room and 3 Room price per square metre are comparable with 4 Room slightly higher. However, this could be due to many outliers with extremely high prices per square metre in 4 Room.\nTo analyze further into time, we use lubridate package to transform month into quarters.\n\nggplot(data = SGResale_2022_byflat, mapping = aes(x = flat_type, y = price_per_sqm)) +\n  # Make grouped boxplot\n  geom_boxplot(aes(fill = as.factor(quarter)), color = \"gray\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"D\") +\n  # Adjust lables and add title\n  labs(title = \"HDB resale prices in 2022 by flat type\", y=\"Price per square metre (SGD)\", fill = \"Quarter\",\n       x = \"Flat type\", caption = \"Source of data: Singapore Housing and Development Board \")\n\n\n\n\nHere we observe that in all flat types, the average price per square metre increases from Q1 to Q4."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#geographical-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#geographical-analysis",
    "title": "Take-home Exercise 3",
    "section": "4.3 Geographical Analysis",
    "text": "4.3 Geographical Analysis\nNext, we will group the dataset by town to find if the geographical effects of the flat’s location on its resale price.\n\nSGResale_2022_psqm <- SGResale_2022 %>%\n  mutate(price_per_sqm = resale_price/floor_area_sqm)\n\nWe plot the the distribution of price per square metre using rigdeline plot using ggridges package.\nWe observe that Central area has the highest price but the distribution is scattered. There is a diverse range of housing in the central area, including skyrise apartments and older homes which could be contributing to this distribution. There are two crests in city fringe neighborhoods such as Queenstown and Kallang/Whampoa, which may indicate that the neighborhood is diverse and contains both costly and inexpensive houses. Observing neighborhoods like Choa Chu Kang, Woodlands, and Sembawang with high concentrations of prices at each crest, it is evident that these are predominantly residential neighborhoods. Considering this, we can conclude that residential housing with mixed housing concentration improves affordability.\n\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town)\n  \n  # Plot the neighborhoods in an ascending order of price per sqm\n  ggplot(data = SGResale_2022_bytown, mapping = aes(x = price_per_sqm, y = reorder(as.factor(town),-price_per_sqm),\n                       fill = after_stat(x)\n                       )) +\n  geom_density_ridges_gradient(color = \"white\") +\n  scale_fill_viridis_c(option = \"C\") +\n  theme_minimal() +\n  \n  # Remove legend, grid line add title\n  theme(legend.position = \"none\") +\n  theme(panel.grid = element_blank()) +\n  labs(title = \"HDB resale prices in 2022 by neighborhood\", x = \"Price per square metre (SGD)\", y = \"\",\n       subtitle = \"Neighborhood exhibit large differences\",\n       caption = \"Data: Housing and Development Board, Singapore\")\n\nPicking joint bandwidth of 247\n\n\n\n\n\nWe drill further into each neighborhood by flat types to see if location had a great effect on flat resale prices. Generally, central area had the most expensive flats by mean price per square meter, followed by Queenstown and Kallang/Whampoa in 2022. This was also observed in 4 Room & 5 Room, the reason could be that these location are in close proximity to the city centre, hence are more expensive especially for those who value connectivity and easy access to the Central Business District (CBD).\nHowever, when we look at 3 Room, surprisingly Pasir Ris was significantly higher than other neighborhoods for 3 Rooms, followed by Punggol & Sengkang. A possible reason for the higher prices in Punggol and Sengkang is the HDB flats that have fulfilled their Minimum Occupation Period (MOP) in 2022 being located in these two towns.\n\nAll Room Types3 Room4 Room5 Room\n\n\n\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=\"Average Flat Resale Price (psm) by Town for all room types in 2022 \", \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10))  \n\n\n\n\n\n\n\ntype <- \"3 ROOM\"\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town) %>% filter(flat_type==type)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=paste(\"Average Flat Resale Price (psm) by Town for\", str_replace(lapply(type, tolower), '_', '-'), \"flats\"), \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10))  \n\n\n\n\n\n\n\ntype <- \"4 ROOM\"\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town) %>% filter(flat_type==type)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=paste(\"Average Flat Resale Price (psm) by Town for\", str_replace(lapply(type, tolower), '_', '-'), \"flats\"), \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10)) \n\n\n\n\n\n\n\ntype <- \"5 ROOM\"\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town) %>% filter(flat_type==type)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=paste(\"Average Flat Resale Price (psm) by Town for\", str_replace(lapply(type, tolower), '_', '-'), \"flats\"), \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10)) \n\n\n\n\n\n\n\nOverall, we observe that the location and type of HDB flat greatly influences the resale price of the property. This is likely because HDB flats in certain parts of the city are more sought-after due to their proximity to amenities and other factors, while certain types of flats may be more desirable due to their size or layout. This is why prospective buyers should consider all these factors carefully before making a purchase."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#other-features",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#other-features",
    "title": "Take-home Exercise 3",
    "section": "4.4 Other features",
    "text": "4.4 Other features\nLoad ggrepel as package\n\nSGResale_2022_byhousingage <- as.data.frame(table(SGResale_2022$town))\n\nSGResale_2022 %>% \n  group_by(town) %>% \n  # Calculate housing age\n  mutate(housing_age = 2021 - lease_commence_date) %>% \n  summarise(average_price = mean(resale_price), average_housing_age = mean(housing_age)) %>% \n  bind_cols(volume = SGResale_2022_byhousingage$Freq) %>% \n  ggplot(mapping = aes(x=average_housing_age, y=average_price)) +\n  geom_count(aes(size = volume, color = volume), alpha = 0.7) +\n  # Change size of count points\n  scale_size_area(max_size = 18) +\n  # Add lables next to count points\n  geom_text_repel(aes(label = town),size = 2.7) +\n  scale_y_continuous(labels = comma, limits = c(330000, 730000)) +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_color_viridis_c(option = \"C\") +\n  labs(title = \"HDB Resale flat features by neighborhood\", x = \"Housing age\", y = \"Resale price (SGD)\", \n       color = \"Resale volume\", size = \"Resale volume\", caption = \"Source of data: Singapore Housing and Development Board, 2021.\")  \n\n\n\n\nVisualize whether higher storey HDB commands a higher price in an interactive heatmap\n\nSGResale_2022_bystorey <- SGResale_2022 %>%\n  group_by(town, storey_range) %>% \n  summarise(Mean_Resale_Price = mean(resale_price))\n\n`summarise()` has grouped output by 'town'. You can override using the\n`.groups` argument.\n\n\n\nggplot(data = SGResale_2022_bystorey, \n                  mapping = aes(x = town, y = storey_range,fill = Mean_Resale_Price)) +\n            geom_tile() +\n  labs(title = \"Heatmap of HDB breakdown by area and storey\", x = \"Town\", y = \"Storey\") +\n  scale_fill_gradient(name = \"Mean Resale Price\",\n                      low = \"#ffedde\",\n                      high = \"#c24b0c\")+\n  theme(axis.text.x = element_text(angle = 45))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "In this exercise, we are required to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html#time-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html#time-analysis",
    "title": "Take-home Exercise 3",
    "section": "4.1 Time Analysis",
    "text": "4.1 Time Analysis\nBy plotting both resale volume and resale price over time, we can see how the HDB prices varies across Year 2022.\nWe group the dataset by month and aggregate by average price:\n\nSGResale_2022_bymonth <- SGResale_2022 %>%\n  group_by(month) %>% \n  mutate(average_price = mean(resale_price))\n\nPlotting both axis on the same graph:\n\n ggplot(data = SGResale_2022_bymonth) +\n  # Plot the price\n  geom_bar(mapping = aes(x=month), fill=\"khaki2\") +\n  # Change position of price\n  geom_point(mapping = aes(x=month, y=average_price/300), color = \"royalblue4\") +\n  geom_line(mapping = aes(x=month, y=average_price/300), group = 1, color = \"royalblue4\") +\n  # Add a second Y axis\n  scale_y_continuous(sec.axis = sec_axis(~.*300, name = \"Resale price (SGD)\", labels = comma)) +\n  \n  # Change color of the second Y axis to match with the color of resale price\n  theme_minimal() +\n  theme(axis.ticks.y.right = element_line(color = \"royalblue4\"),\n        axis.text.y.right = element_text(color = \"royalblue4\"), \n        axis.title.y.right = element_text(color = \"royalblue4\")) +\n  \n  # Adjust styles, lables and add title\n  theme(axis.text.x=element_text(angle = 35)) +\n  labs(title = \"HDB resale market in Year 2022\", y=\"Resale volume\", \n       x = \"Month\", caption = \"Source of data: Singapore Housing and Development Board\")\n\n\n\n\nWe observe that the overall resale price for HDB resale market is around the same throughout 2022. However, there was a huge spike in Sept and dropped further in Oct. This may be due to the cooling measure announced by the government which took immediate effect on 30 September 2022."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html#flat-type-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html#flat-type-analysis",
    "title": "Take-home Exercise 3",
    "section": "4.2 Flat Type Analysis",
    "text": "4.2 Flat Type Analysis\nNext, we plot boxplot by quarter and across flat type to see how prices fluctuated in the last year for different flat types. ** rework on this based on ANOVA?\n\nSGResale_2022_byflat <- SGResale_2022 %>%\n  group_by(flat_type) %>% \n  mutate(quarter = quarter(ym(month)),\n         price_per_sqm = resale_price/floor_area_sqm)\n\n\nggplot(data = SGResale_2022_byflat, mapping = aes(x = flat_type, y = price_per_sqm)) +\n   geom_boxplot(color = \"black\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"A\") +\n  # Adjust lables and add title\n  labs(title = \"HDB resale prices in 2022 by flat type\", y=\"Price per square metre (SGD)\",\n       x = \"Flat type\", caption = \"Source of data: Singapore Housing and Development Board\")\n\n\n\n\nWe observe that the price per square metre for 5 Room is the lowest. Interestingly, 4 Room and 3 Room price per square metre are comparable with 4 Room slightly higher. However, this could be due to many outliers with extremely high prices per square metre in 4 Room.\nTo analyze further into time, we use lubridate package to transform month into quarters.\n\nggplot(data = SGResale_2022_byflat, mapping = aes(x = flat_type, y = price_per_sqm)) +\n  # Make grouped boxplot\n  geom_boxplot(aes(fill = as.factor(quarter)), color = \"gray\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"D\") +\n  # Adjust lables and add title\n  labs(title = \"HDB resale prices in 2022 by flat type\", y=\"Price per square metre (SGD)\", fill = \"Quarter\",\n       x = \"Flat type\", caption = \"Source of data: Singapore Housing and Development Board \")\n\n\n\n\nHere we observe that in all flat types, the average price per square metre increases from Q1 to Q4."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html#geographical-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html#geographical-analysis",
    "title": "Take-home Exercise 3",
    "section": "4.3 Geographical Analysis",
    "text": "4.3 Geographical Analysis\nNext, we will group the dataset by town to find if the geographical effects of the flat’s location on its resale price.\n\nSGResale_2022_psqm <- SGResale_2022 %>%\n  mutate(price_per_sqm = resale_price/floor_area_sqm)\n\nWe plot the the distribution of price per square metre using rigdeline plot using ggridges package. We observe that Central area has the highest price but the distribution is scattered. There is a diverse range of housing in the central area, including skyrise apartments and older homes which could be contributing to this distribution. There are two crests in city fringe neighborhoods such as Queenstown and Kallang/Whampoa, which may indicate that the neighbourhood is diverse and contains both costly and inexpensive houses. Observing neighborhoods like Choa Chu Kang, Woodlands, and Sembawang with high concentrations of prices at each crest, it is evident that these are predominantly residential neighborhoods. Considering this, we can conclude that residential housing with mixed housing concentration improves affordability.\n\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town)\n  \n  # Plot the neighborhoods in an ascending order of price per sqm\n  ggplot(data = SGResale_2022_bytown, mapping = aes(x = price_per_sqm, y = reorder(as.factor(town),-price_per_sqm),\n                       fill = after_stat(x)\n                       )) +\n  geom_density_ridges_gradient(color = \"white\") +\n  scale_fill_viridis_c(option = \"C\") +\n  theme_minimal() +\n  \n  # Remove legend, grid line add title\n  theme(legend.position = \"none\") +\n  theme(panel.grid = element_blank()) +\n  labs(title = \"HDB resale prices in 2022 by neighborhood\", x = \"Price per square metre (SGD)\", y = \"\",\n       subtitle = \"Neighborhood exhibit large differences\",\n       caption = \"Data: Housing and Development Board, Singapore\")\n\nPicking joint bandwidth of 247\n\n\n\n\n\nWe drill further into each neighborhood by flat types to see if location had a great effect on flat resale prices. Generally, central area had the most expensive flats by mean price per square meter, followed by Queenstown and Kallang/Whampoa in 2022. This was also observed in 4 Room & 5 Room, the reason could be that these location are in close proximity to the city centre, hence are more expensive especially for those who value connectivity and easy access to the Central Business District (CBD).\nHowever, when we look at 3 Room, surprisingly Pasir Ris was significantly higher than other neighborhoods for 3 Rooms, followed by Punggol & Sengkang. A possible reason for the higher prices in Punggol and Sengkang is the HDB flats that have fulfilled their Minimum Occupation Period (MOP) in 2022 being located in these two towns.\n\nAll Room Types3 Room4 Room5 Room\n\n\n\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=\"Average Flat Resale Price (psm) by Town for all room types in 2022 \", \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10))  \n\n\n\n\n\n\n\ntype <- \"3 ROOM\"\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town) %>% filter(flat_type==type)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=paste(\"Average Flat Resale Price (psm) by Town for\", str_replace(lapply(type, tolower), '_', '-'), \"flats\"), \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10))  \n\n\n\n\n\n\n\ntype <- \"4 ROOM\"\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town) %>% filter(flat_type==type)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=paste(\"Average Flat Resale Price (psm) by Town for\", str_replace(lapply(type, tolower), '_', '-'), \"flats\"), \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10)) \n\n\n\n\n\n\n\ntype <- \"5 ROOM\"\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town) %>% filter(flat_type==type)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=paste(\"Average Flat Resale Price (psm) by Town for\", str_replace(lapply(type, tolower), '_', '-'), \"flats\"), \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html#other-features",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_v1.html#other-features",
    "title": "Take-home Exercise 3",
    "section": "4.4 Other features",
    "text": "4.4 Other features\nNext, we look at the other features to see if they Load ggrepel as package\n\nSGResale_2022_byhousingage <- as.data.frame(table(SGResale_2022$town))\n\nSGResale_2022 %>% \n  group_by(town) %>% \n  # Calculate housing age\n  mutate(housing_age = 2021 - lease_commence_date) %>% \n  summarise(average_price = mean(resale_price), average_housing_age = mean(housing_age)) %>% \n  bind_cols(volume = SGResale_2022_byhousingage$Freq) %>% \n  ggplot(mapping = aes(x=average_housing_age, y=average_price)) +\n  geom_count(aes(size = volume, color = volume), alpha = 0.7) +\n  # Change size of count points\n  scale_size_area(max_size = 18) +\n  # Add lables next to count points\n  geom_text_repel(aes(label = town),size = 2.7) +\n  scale_y_continuous(labels = comma, limits = c(330000, 730000)) +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_color_viridis_c(option = \"C\") +\n  labs(title = \"HDB Resale flat features by neighborhood\", x = \"Housing age\", y = \"Resale price (SGD)\", \n       color = \"Resale volume\", size = \"Resale volume\", caption = \"Source of data: Singapore Housing and Development Board\")  \n\n\n\n\nVisualize whether higher storey HDB commands a higher price in an interactive heatmap\n\nSGResale_2022_bystorey <- SGResale_2022 %>%\n  group_by(town, storey_range) %>% \n  summarise(Mean_Resale_Price = mean(resale_price))\n\n`summarise()` has grouped output by 'town'. You can override using the\n`.groups` argument.\n\n\nFirst, based on the heatmap, it is generally true that higher storey units commands a better price, as illustrated from the darker colours on higher storey.\nHowever, if you stay in unpopular towns such as Woodlands, Sembawang, Choa Chu Kang, Jurong West, Pasir Ris, Punggol and Hougang, there is not much differentiation in price even for higher storey units. This is probably because these town are at the edges of Singapore. It is extremely inconvenient to commute from those areas to town. Therefore, there is less demand for those flats resulting in a lower price.\nFinally, from the heatmap, it is observed that flats in Bukit Timah is relatively low rised compared to other towns. The highest storey in Bukit Timah is only 15. This is probably because Bukit Timah is known as an exclusive area with many Bungalows and Terraces houses. Therefore, to maintain its “prestige”, the urban planning ministry might have intentionally kept HDB storey at Bukit Timah low too.\n\nggplot(data = SGResale_2022_bystorey, \n                  mapping = aes(x = town, y = storey_range,fill = Mean_Resale_Price)) +\n            geom_tile() +\n  labs(title = \"Heatmap of HDB breakdown by area and storey\", x = \"Town\", y = \"Storey\") +\n  scale_fill_gradient(name = \"Mean Resale Price\",\n                      low = 'azure',\n                      high = 'cadetblue4')+\n  theme(axis.text.x = element_text(angle = 45))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "With the help of analysis visualisation techniques, we are to uncover the impact of COVID-19 and the global economic and political dynamics of 2022 on Singapore’s bi-lateral trade (i.e. import, export and trade balance)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#heatmap",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#heatmap",
    "title": "Take-home Exercise 4",
    "section": "4.1 Heatmap",
    "text": "4.1 Heatmap\nIn a calendar heatmap, colored cells show the number of events for each period of time. Heatmaps are used to identify seasonal patterns and anomalies in data and enable users to identify these patterns quickly. The heatmap uses colors and saturation to represent data values, so users can easily identify the high and low values based on color intensity in the heatmap.\n\n\nShow the code\ntotalsgtrade_calmap <- totalsgtrade %>% \n  mutate(Month = factor(format(MonthYear,\"%b\")), .after = Year) %>% \n  mutate(Trade_Balance = (Export - Import)/1000000000,\n         Trade_Volumes = (Export + Import)/1000000000)\n\nsgtrade_calmap <- sgtrade_joined %>% \n  mutate(Trade_Balance = TradeBalance_SGD/1000000000)\n\n\nsgtrade_calmap$Countries <- fct_reorder(sgtrade_calmap$Countries, sgtrade_calmap$TradeVolume_SGD, .desc = TRUE)\n\n\nHere, we are plotting the total trade volume over the years & months.\n\n\nShow the code\n#Plotting the base plot\nggplot(totalsgtrade_calmap %>% \n         mutate(Year = factor(Year, levels =c(2022,2021,2020))), \n       aes(x = Month, \n           y = Year, \n           fill = Trade_Volumes)) + \n  \n  geom_tile(color = \"white\") + \n\n#Setting the colors for the main plot\n  scale_fill_gradient(name = \"Trade Volume (Billions SGD)\",\n                    low = \"#fc8d59\", \n                    high = \"#5ab4ac\") +\n\n  \n  coord_equal() +\n  \n  theme(axis.ticks = element_blank(),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6),\n      plot.title = element_text(face = \"bold\")) +\n  \n\n  labs(x = NULL, \n     y = NULL, \n     title = \"Singapore Trade Volume by calendar months, 2020-2022\",\n     caption = \"Department of Statistics, Singapore\") \n\n\n\n\n\nInsights\nWe observe the following:\n\nThe top 3 lowest trade volume happened in Apr - Jun 2020 –> This coincides with the economic slowdown in major economies and supply chain disruptions as well as the implementation of the circuit Breaker (CB) measures domestically from April to June 2020.\nSingapore trade volume continue to increase from Mar 2021 onwards due to relaxation of covid-restrictions. This is observed by green (high trade volumes) from Mar - Sep 2022. In Oct 2022, there is a slowdown due to recession.\n\n\n\nShow the code\n#Plotting the base plot\nggplot(totalsgtrade_calmap %>% \n         mutate(Year = factor(Year, levels =c(2022,2021,2020))), \n       aes(x = Month, \n           y = Year, \n           fill = Trade_Balance)) + \n  \n  geom_tile(color = \"white\") + \n\n#Setting the colors for the main plot\n  scale_fill_gradientn(name = \"Trade Balance (Billions SGD)\",\n                     colors=c(\"#fc8d59\",\"grey90\",\"#5ab4ac\"),\n                     limits=c(min(totalsgtrade_calmap$Trade_Balance),max(totalsgtrade_calmap$Trade_Balance))) +\n\n  coord_equal() +\n  \n  theme(axis.ticks = element_blank(),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6),\n      plot.title = element_text(face = \"bold\")) +\n  \n  labs(x = NULL, \n     y = NULL, \n     title = \"Singapore Trade Balance by calendar months, 2020-2022\",\n     caption = \"Department of Statistics, Singapore\") \n\n\n\n\n\nInsights\nWe observe the following:\n\nAcross all three years, Singapore exports more than it imports, which may be attributed to its strategic location.\nImports exceed exports in May 2022, resulting in a negative trade balance. The same pattern could be seen in April-August 2022 and October-December 2022. This could be because, as the United States enters a recession (Summer 2022 & Oct 2022), Singapore is not immune, and the world economy enters a slump, with fewer exports. While Singapore continues to import, which is understandable given the country’s scarcity of natural resources."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#trade-balance-of-singapore",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#trade-balance-of-singapore",
    "title": "Take-home Exercise 4",
    "section": "4.2 Trade Balance of Singapore",
    "text": "4.2 Trade Balance of Singapore\nThe difference between a country’s exports and imports for a certain period is known as the balance of trade (BOT). A country with a trade deficit imports more products and services than it exports in terms of value, whereas a country with a trade surplus exports more goods and services than it imports.\nWe utilize a horizon graph to show Singapore’s trade balance trend over the last three years, broken down by region. Each row represents a different country, with red representing a trade deficit and blue representing a trade surplus.\nInsights\nWe can examine the main importers/exporters and trading activities of trading partners over time. We also observe that there is less trading activity with countries in America and Europe. Singapore primarily trades in Asia Pacific, possibly due to proximity.\n\nIn Asia, we mostly export (blue) to Hong Kong, Indonesia, and Vietnam. We primarily import (red) from Malaysia and Taiwan.\nIn the United States, we mostly export (blue) to Guam and Puerto Rico. While we mostly import (red) from the United States, we also import from Brazil.\nIn Europe, we mostly export (blue) to the Netherlands and Greece. While we mostly import (red) from Italy, Spain, Sweden, Switzerland, and the United Kingdom. This could be because of free trade agreements with the European Union.\nWe mostly export to countries in Oceania.\n\nWhat is noteworthy about this analysis is that we observe that we often export to smaller countries while importing from larger countries. This could be due to Singapore’s many bilateral and regional FTAs including with Australia, China, Costa Rica, India, Japan, Jordan, New Zealand, Republic of Korea, Panama, Peru, Sri Lanka, European Union, United Kingdom and Turkey.\n\nAsiaAmericaEuropeOceania\n\n\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=totalsgtrade_oceania_tradebalance) +\n  geom_horizon(aes(x=MonthYear, y=TradeBalance_SGD), \n               origin = 0, \n               horizonscale = 6)+\n  facet_grid(Countries~.) +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), \n        strip.text.y = element_text(size = 8, angle = 0, hjust = 0),\n    legend.position = \"none\",\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=6.5, angle = 0, hjust=0.5),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank(),\n    plot.title = element_text(size=13, face=\"bold\")) +\n    scale_x_date(expand=c(0,0), date_breaks = \"2 month\", date_labels = \"%b'%y\") +\n  labs(title = 'Singapore Quarterly Trade Balance with countries in Oceania region (2020-2022)', \n       caption=\"Department of Statistics, Singapore\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#asia-1",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#asia-1",
    "title": "Take-home Exercise 4",
    "section": "Asia",
    "text": "Asia\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#america-1",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#america-1",
    "title": "Take-home Exercise 4",
    "section": "America",
    "text": "America"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#europe-1",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#europe-1",
    "title": "Take-home Exercise 4",
    "section": "Europe",
    "text": "Europe"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#oceania-1",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#oceania-1",
    "title": "Take-home Exercise 4",
    "section": "Oceania",
    "text": "Oceania\n\n\nShow the code\nggplot(data=totalsgtrade_oceania_tradebalance) +\n  geom_horizon(aes(x=MonthYear, y=TradeBalance_SGD), \n               origin = 0, \n               horizonscale = 6)+\n  facet_grid(Countries~.) +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), \n        strip.text.y = element_text(size = 8, angle = 0, hjust = 0),\n    legend.position = \"none\",\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=6.5, angle = 0, hjust=0.5),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank(),\n    plot.title = element_text(size=13, face=\"bold\")) +\n    scale_x_date(expand=c(0,0), date_breaks = \"2 month\", date_labels = \"%b'%y\") +\n  labs(title = 'Singapore Quarterly Trade Balance with countries in Oceania region (2020-2022)', \n       caption=\"Department of Statistics, Singapore\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#export-import-graphs",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#export-import-graphs",
    "title": "Take-home Exercise 4",
    "section": "4.3 Export-Import Graphs",
    "text": "4.3 Export-Import Graphs\nPlotting both export and import line into the same graph allows us to examine Singapore’s exports and imports easier over time. The user can easily determine whether each country’s trade activities are in surplus (green) or deficit (purple).\nInsights\nSingapore has experienced a trade surplus for the last three years, as shown in the green region, which is more than the purple area. The result is consistent with the trade summary from World Bank.org. This was also evident in the heatmap, which showed a low trade balance in May 2022. Trade activity falls sharply between February 2020 and December 2021. The drop in February 2020 was caused by Covid-19 shutdown restrictions and a standstill in global economic activity, during which the Singapore economy experienced both demand- and supply-side disruptions. Whereas the second drop in trade activity in December 2021 could be related to the uncertainty of Russia invading Ukraine. The decrease continued until February 2022, when the Russia-Ukraine war begin. On the other hand, imports and exports increased in March 2021 which could be due to easing of Covid restrictions.\nSimilar patterns can be found in different regions, as evidenced by the Trade Balance, where trade activity are lower in countries in America and higher in Asia. It’s worth noting that several countries had a mix of trade surpluses and trade deficits (e.g. Korea, China, US). For example, exports to China increased from July 2020 to April 2022, which might be linked to the pandemic and China’s strict zero covid policy, which delayed China’s opening and consequently lowered imports.\n\nOverallAsiaAmericaEuropeOceania\n\n\n\n\nShow the code\n#Plotting the base plot\nexim_plot <- ggplot() +\n  geom_line(data = totalsgtrade_pivot,\n            aes(x = MonthYear,\n                y = Values,\n                group = Type,\n                color = Type),\n            linewidth = 1) +\n  \n  geom_braid(data = totalsgtrade,\n             aes(x = MonthYear,\n                 ymin = Import,\n                 ymax = Export,\n                 fill = Import < Export),\n             alpha = 0.5) +\n\n#Remove the legend \n  guides(linetype = \"none\", fill = \"none\") +\n  \n#Adding the 'Import' and 'Export' labels at the end of the line charts\n  geom_dl(data = totalsgtrade_pivot,\n          aes(x = MonthYear,\n              y = Values,\n              label = Type,\n              color = Type),\n          method = list(dl.trans(x = x + 0.2), \"last.points\", cex = 1)) +\n  \n  geom_dl(data = totalsgtrade_pivot,\n          aes(x = MonthYear,\n              y = Values,\n              label = Type,\n              color = Type),\n          method = list(dl.trans(x = x - 0.2), \"first.points\", cex = 1)) +\n\n#Setting the colors for the main plot  \n  scale_color_manual(values = c(\"#7fbf7b\", \"#af8dc3\"),\n                     labels = c(\"Export\", \"Import\"),\n                     name = NULL,\n                     guide = \"none\") +\n  \n  scale_fill_manual(values = c(\"#cbd5e8\", \"#B6DAB4\")) +\n  \n#Adjusting the scale\n  scale_x_date(expand = c(0,0),\n               limits = c(as.Date(\"2020-01-01\"),as.Date(\"2023-03-31\")),\n               date_breaks = \"3 month\",\n               date_labels = \"%b %Y\") +\n  \n  scale_y_continuous(\"Trade Values\",\n                     labels = function(x){paste0('$', abs(x/1000000000),'B')}) +\n  \n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1),\n      legend.position = 'top',\n      legend.justification = 'center',\n      panel.grid.major.y = element_blank()) +\n  \n#Adding title, subtitle, and captions   \n  labs(title = \"Singapore overall trade activities\",\n         subtitle = \"2020-2022\",\n         caption = \"Department of Statistics, Singapore\")\n\nexim_plot\n\n\n`geom_braid()` using method = 'line'\n\n\n\n\n\n\n\n\n\nShow the code\n#Plotting the base plot\nexim_plot_asia <- ggplot() +\n  geom_line(data = totalsgtrade_pivot_asia,\n            aes(x = MonthYear,\n                y = Values,\n                group = Type,\n                color = Type),\n            linewidth = 1) +\n  \n  geom_braid(data = totalsgtrade_asia,\n             aes(x = MonthYear,\n                 ymin = Import,\n                 ymax = Export,\n                 fill = Import < Export),\n             alpha = 0.5) +\n\n#Remove the legend \n  guides(linetype = \"none\", fill = \"none\") +\n  facet_wrap(~Countries, ncol = 5) +\n\n#Setting the colors for the main plot  \n  scale_color_manual(values = c(\"#7fbf7b\", \"#af8dc3\"),\n                     labels = c(\"Export\", \"Import\"),\n                     name = NULL,\n                     guide = \"none\") +\n  \n  scale_fill_manual(values = c(\"#cbd5e8\", \"#B6DAB4\")) +\n  \n#Adjusting the scale\n  scale_x_date(expand = c(0,0),\n               limits = c(as.Date(\"2020-01-01\"),as.Date(\"2023-03-31\")),\n               date_breaks = \"3 month\",\n               date_labels = \"%b %Y\") +\n  \n  scale_y_continuous(\"Trade Values\",\n                     labels = function(x){paste0('$', abs(x/1000000000),'B')}) +\n  \n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1),\n      legend.position = 'top',\n      legend.justification = 'center',\n      panel.grid.major.y = element_blank()) +\n  \n#Adding title, subtitle, and captions   \n  labs(title = \"Asia-Singapore trade activities\",\n         subtitle = \"2020-2022\",\n         caption = \"Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \\n The shaded purple area represents Export value < Import value, indicating a trade deficit.\") +\n    theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=6, angle=45, hjust = 1)\n  )\n\nexim_plot_asia\n\n\n`geom_braid()` using method = 'line'\n\n\n\n\n\n\n\n\n\nShow the code\n#Plotting the base plot\nexim_plot_america <- ggplot() +\n  geom_line(data = totalsgtrade_pivot_america,\n            aes(x = MonthYear,\n                y = Values,\n                group = Type,\n                color = Type),\n            linewidth = 1) +\n  \n  geom_braid(data = totalsgtrade_america,\n             aes(x = MonthYear,\n                 ymin = Import,\n                 ymax = Export,\n                 fill = Import < Export),\n             alpha = 0.5) +\n\n#Remove the legend \n  guides(linetype = \"none\", fill = \"none\") +\n  facet_wrap(~Countries, ncol = 5) +\n\n#Setting the colors for the main plot  \n  scale_color_manual(values = c(\"#7fbf7b\", \"#af8dc3\"),\n                     labels = c(\"Export\", \"Import\"),\n                     name = NULL,\n                     guide = \"none\") +\n  \n  scale_fill_manual(values = c(\"#cbd5e8\", \"#B6DAB4\")) +\n  \n#Adjusting the scale\n  scale_x_date(expand = c(0,0),\n               limits = c(as.Date(\"2020-01-01\"),as.Date(\"2023-03-31\")),\n               date_breaks = \"3 month\",\n               date_labels = \"%b %Y\") +\n  \n  scale_y_continuous(\"Trade Values\",\n                     labels = function(x){paste0('$', abs(x/1000000000),'B')}) +\n  \n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1),\n      legend.position = 'top',\n      legend.justification = 'center',\n      panel.grid.major.y = element_blank()) +\n  \n#Adding title, subtitle, and captions   \n  labs(title = \"America-Singapore trade activities\",\n         subtitle = \"2020-2022\",\n         caption = \"Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \\n The shaded purple area represents Export value < Import value, indicating a trade deficit.\") +\n    theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=6, angle=45, hjust = 1)\n  )\n\nexim_plot_america\n\n\n`geom_braid()` using method = 'line'\n\n\n\n\n\n\n\n\n\nShow the code\n#Plotting the base plot\nexim_plot_europe <- ggplot() +\n  geom_line(data = totalsgtrade_pivot_europe,\n            aes(x = MonthYear,\n                y = Values,\n                group = Type,\n                color = Type),\n            linewidth = 1) +\n  \n  geom_braid(data = totalsgtrade_europe,\n             aes(x = MonthYear,\n                 ymin = Import,\n                 ymax = Export,\n                 fill = Import < Export),\n             alpha = 0.5) +\n\n#Remove the legend \n  guides(linetype = \"none\", fill = \"none\") +\n  facet_wrap(~Countries, ncol = 5) +\n\n#Setting the colors for the main plot  \n  scale_color_manual(values = c(\"#7fbf7b\", \"#af8dc3\"),\n                     labels = c(\"Export\", \"Import\"),\n                     name = NULL,\n                     guide = \"none\") +\n  \n  scale_fill_manual(values = c(\"#cbd5e8\", \"#B6DAB4\")) +\n  \n#Adjusting the scale\n  scale_x_date(expand = c(0,0),\n               limits = c(as.Date(\"2020-01-01\"),as.Date(\"2023-03-31\")),\n               date_breaks = \"3 month\",\n               date_labels = \"%b %Y\") +\n  \n  scale_y_continuous(\"Trade Values\",\n                     labels = function(x){paste0('$', abs(x/1000000000),'B')}) +\n  \n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1),\n      legend.position = 'top',\n      legend.justification = 'center',\n      panel.grid.major.y = element_blank()) +\n  \n#Adding title, subtitle, and captions   \n  labs(title = \"Europe-Singapore trade activities\",\n         subtitle = \"2020-2022\",\n         caption = \"Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \\n The shaded purple area represents Export value < Import value, indicating a trade deficit.\") +\n    theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=6, angle=45, hjust = 1)\n  )\n\nexim_plot_europe\n\n\n`geom_braid()` using method = 'line'\n\n\n\n\n\n\n\n\n\nShow the code\n#Plotting the base plot\nexim_plot_oceania <- ggplot() +\n  geom_line(data = totalsgtrade_pivot_oceania,\n            aes(x = MonthYear,\n                y = Values,\n                group = Type,\n                color = Type),\n            linewidth = 1) +\n  \n  geom_braid(data = totalsgtrade_oceania,\n             aes(x = MonthYear,\n                 ymin = Import,\n                 ymax = Export,\n                 fill = Import < Export),\n             alpha = 0.5) +\n\n#Remove the legend \n  guides(linetype = \"none\", fill = \"none\") +\n  facet_wrap(~Countries, ncol = 5) +\n\n#Setting the colors for the main plot  \n  scale_color_manual(values = c(\"#7fbf7b\", \"#af8dc3\"),\n                     labels = c(\"Export\", \"Import\"),\n                     name = NULL,\n                     guide = \"none\") +\n  \n  scale_fill_manual(values = c(\"#cbd5e8\", \"#B6DAB4\")) +\n  \n#Adjusting the scale\n  scale_x_date(expand = c(0,0),\n               limits = c(as.Date(\"2020-01-01\"),as.Date(\"2023-03-31\")),\n               date_breaks = \"3 month\",\n               date_labels = \"%b %Y\") +\n  \n  scale_y_continuous(\"Trade Values\",\n                     labels = function(x){paste0('$', abs(x/1000000000),'B')}) +\n  \n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1),\n      legend.position = 'top',\n      legend.justification = 'center',\n      panel.grid.major.y = element_blank()) +\n  \n#Adding title, subtitle, and captions   \n  labs(title = \"Oceania-Singapore trade activities\",\n         subtitle = \"2020-2022\",\n         caption = \"Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \\n The shaded purple area represents Export value < Import value, indicating a trade deficit.\") +\n    theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=6, angle=45, hjust = 1)\n  )\n\nexim_plot_oceania\n\n\n`geom_braid()` using method = 'line'"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#slopegraph-4",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04.html#slopegraph-4",
    "title": "Take-home Exercise 4",
    "section": "4.3 SlopeGraph",
    "text": "4.3 SlopeGraph\nThe Slopegraph depicts the year-on-year trend of these countries’ total trade balance with Singapore. It is more intuitive for users as the slope-up/slope-down of the lines shows the increase/decrease in trade balance. Here we are only plotting the top 15 trade volume in each region.\nIn Asia, we can see that Hong Kong remains the top exporter of Singapore year on year (increasing trend). While Taiwan remains the top importer of Singapore year on year (decreasing trend).\nIn America, it is interesting to note that United States turned from trade surplus in 2020 to trade deficit in 2021 and 2022.\nIn Europe, most countries seems to be quite stable across the years and with more countries with trade deficit, this could be due to the ongoing European Union-Singapore Free Trade Agreement and the hit in resources from Russia-Ukraine war which meant more imports from Singapore.\nIn Oceania, it is interesting to see that we are exporting more to Australia & New Zealand over the years.\n\nAsiaAmericaEuropeOceania\n\n\n\n\nShow the code\nCGPfunctions::newggslopegraph(dataframe = sgtrade_joined_countryyear_Asia,\n                Year, TotalTradeBalance_BSGD, Countries,\n                Title = \"Year-on-Year change of Total Trade Balance (Countries in Asia)\",\n                SubTitle = \"2020 - 2022\",\n                Caption = \"Department of Statistics, Singapore\")\n\n\n\n\n\n\n\n\n\nShow the code\nCGPfunctions::newggslopegraph(dataframe = sgtrade_joined_countryyear_America,\n                Year, TotalTradeBalance_BSGD, Countries,\n                Title = \"Year-on-Year change of Total Trade Balance (Countries in America)\",\n                SubTitle = \"2020 - 2022\",\n                Caption = \"Department of Statistics, Singapore\")\n\n\n\n\n\n\n\n\n\nShow the code\nCGPfunctions::newggslopegraph(dataframe = sgtrade_joined_countryyear_Europe,\n                Year, TotalTradeBalance_BSGD, Countries,\n                Title = \"Year-on-Year change of Total Trade Balance (Countries in Europe)\",\n                SubTitle = \"2020 - 2022\",\n                Caption = \"Department of Statistics, Singapore\")\n\n\n\n\n\n\n\n\n\nShow the code\nCGPfunctions::newggslopegraph(dataframe = sgtrade_joined_countryyear_oceania,\n                Year, TotalTradeBalance_BSGD, Countries,\n                Title = \"Year-on-Year change of Total Trade Balance (Countries in Oceania)\",\n                SubTitle = \"2020 - 2022\",\n                Caption = \"Department of Statistics, Singapore\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Getting Started",
    "text": "Getting Started\n::: callout-info ## Do It Yourself Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nShow the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmetically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nThe Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\nImporting the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\n\ntz field stores time zone of the source IP address.\n\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nNote: Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the Calendar Heatmaps\n\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn from the code chunk: - a tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. - a new field called n is derived by using group_by() and count() functions. - na.omit() is used to exclude missing value. - geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. - theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot. - coord_equal() is used to ensure the plot will have an aspect ratio of 1:1. - scale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\nBuilding Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Cycle Plot",
    "text": "Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nData Preparation\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\nStep 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\nStep 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nPlotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_old.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_old.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "In this exercise, we are required to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_old.html#time-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_old.html#time-analysis",
    "title": "Take-home Exercise 3",
    "section": "4.1 Time Analysis",
    "text": "4.1 Time Analysis\nBy plotting both resale volume and resale price over time, we can see how the HDB prices varies across Year 2022.\nWe group the dataset by month and aggregate by average price:\n\nSGResale_2022_bymonth <- SGResale_2022 %>%\n  group_by(month) %>% \n  mutate(average_price = mean(resale_price))\n\nPlotting both axis on the same graph:\n\n ggplot(data = SGResale_2022_bymonth) +\n  # Plot the price\n  geom_bar(mapping = aes(x=month), fill=\"khaki2\") +\n  # Change position of price\n  geom_point(mapping = aes(x=month, y=average_price/300), color = \"royalblue4\") +\n  geom_line(mapping = aes(x=month, y=average_price/300), group = 1, color = \"royalblue4\") +\n  # Add a second Y axis\n  scale_y_continuous(sec.axis = sec_axis(~.*300, name = \"Resale price (SGD)\", labels = comma)) +\n  \n  # Change color of the second Y axis to match with the color of resale price\n  theme_minimal() +\n  theme(axis.ticks.y.right = element_line(color = \"royalblue4\"),\n        axis.text.y.right = element_text(color = \"royalblue4\"), \n        axis.title.y.right = element_text(color = \"royalblue4\")) +\n  \n  # Adjust styles, lables and add title\n  theme(axis.text.x=element_text(angle = 35)) +\n  labs(title = \"HDB resale market in Year 2022\", y=\"Resale volume\", \n       x = \"Month\", caption = \"Source of data: Singapore Housing and Development Board\")\n\n\n\n\nWe observe that the overall resale price for HDB resale market is around the same throughout 2022. However, there was a huge spike in Sept and dropped further in Oct. This may be due to the cooling measure announced by the government which took immediate effect on 30 September 2022."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_old.html#flat-type-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_old.html#flat-type-analysis",
    "title": "Take-home Exercise 3",
    "section": "4.2 Flat Type Analysis",
    "text": "4.2 Flat Type Analysis\nNext, we plot boxplot by quarter and across flat type to see how prices fluctuated in the last year for different flat types.\n\nSGResale_2022_byflat <- SGResale_2022 %>%\n  group_by(flat_type) %>% \n  mutate(quarter = quarter(ym(month)),\n         price_per_sqm = resale_price/floor_area_sqm)\n\n\nggbetweenstats(\n  data = SGResale_2022_byflat,\n  x = flat_type,\n  y = price_per_sqm,\n  type = \"np\",\n  plot.type = \"boxviolin\",\n  title = \"HDB resale prices in 2022 by flat type\",\n  xlab = \"Flat type\",\n  ylab =\"Price per sqm (SGD)\")\n\n\n\n\nThe overall p-value of the ANOVA test between Type of Flat and Resale Price per sqm is 0.00 < 0.05, which suggests that we can reject the null hypotheses. This means that each flat type has a different mean resale price.\n\nggplot(data = SGResale_2022_byflat, mapping = aes(x = flat_type, y = price_per_sqm)) +\n   geom_boxplot(color = \"black\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"A\") +\n  # Adjust lables and add title\n  labs(title = \"HDB resale prices in 2022 by flat type\", y=\"Price per square metre (SGD)\",\n       x = \"Flat type\", caption = \"Source of data: Singapore Housing and Development Board\")\n\n\n\n\nWe observe that the price per square metre for 5 Room is the lowest. Interestingly, 4 Room and 3 Room price per square metre are comparable with 4 Room slightly higher. However, this could be due to many outliers with extremely high prices per square metre in 4 Room.\nTo analyze further into time, we use lubridate package to transform month into quarters.\n\nggplot(data = SGResale_2022_byflat, mapping = aes(x = flat_type, y = price_per_sqm)) +\n  # Make grouped boxplot\n  geom_boxplot(aes(fill = as.factor(quarter)), color = \"gray\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"D\") +\n  # Adjust lables and add title\n  labs(title = \"HDB resale prices in 2022 by flat type\", y=\"Price per square metre (SGD)\", fill = \"Quarter\",\n       x = \"Flat type\", caption = \"Source of data: Singapore Housing and Development Board \")\n\n\n\n\nHere we observe that in all flat types, the average price per square metre increases from Q1 to Q4."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_old.html#geographical-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03_old.html#geographical-analysis",
    "title": "Take-home Exercise 3",
    "section": "4.3 Geographical Analysis",
    "text": "4.3 Geographical Analysis\nNext, we will group the dataset by town to find if the geographical effects of the flat’s location on its resale price.\n\nSGResale_2022_psqm <- SGResale_2022 %>%\n  mutate(price_per_sqm = resale_price/floor_area_sqm)\n\nWe plot the the distribution of price per square metre using rigdeline plot using ggridges package.\nWe observe that Central area has the highest price but the distribution is scattered. There is a diverse range of housing in the central area, including skyrise apartments and older homes which could be contributing to this distribution. There are two crests in city fringe neighborhoods such as Queenstown and Kallang/Whampoa, which may indicate that the neighborhood is diverse and contains both costly and inexpensive houses. Observing neighborhoods like Choa Chu Kang, Woodlands, and Sembawang with high concentrations of prices at each crest, it is evident that these are predominantly residential neighborhoods. Considering this, we can conclude that residential housing with mixed housing concentration improves affordability.\n\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town)\n  \n  # Plot the neighborhoods in an ascending order of price per sqm\n  ggplot(data = SGResale_2022_bytown, mapping = aes(x = price_per_sqm, y = reorder(as.factor(town),-price_per_sqm),\n                       fill = after_stat(x)\n                       )) +\n  geom_density_ridges_gradient(color = \"white\") +\n  scale_fill_viridis_c(option = \"C\") +\n  theme_minimal() +\n  \n  # Remove legend, grid line add title\n  theme(legend.position = \"none\") +\n  theme(panel.grid = element_blank()) +\n  labs(title = \"HDB resale prices in 2022 by neighborhood\", x = \"Price per square metre (SGD)\", y = \"\",\n       subtitle = \"Neighborhood exhibit large differences\",\n       caption = \"Data: Housing and Development Board, Singapore\")\n\nPicking joint bandwidth of 247\n\n\n\n\n\nWe drill further into each neighborhood by flat types to see if location had a great effect on flat resale prices. Generally, central area had the most expensive flats by mean price per square meter, followed by Queenstown and Kallang/Whampoa in 2022. This was also observed in 4 Room & 5 Room, the reason could be that these location are in close proximity to the city centre, hence are more expensive especially for those who value connectivity and easy access to the Central Business District (CBD).\nHowever, when we look at 3 Room, surprisingly Pasir Ris was significantly higher than other neighborhoods for 3 Rooms, followed by Punggol & Sengkang. A possible reason for the higher prices in Punggol and Sengkang is the HDB flats that have fulfilled their Minimum Occupation Period (MOP) in 2022 being located in these two towns.\n\nAll Room Types3 Room4 Room5 Room\n\n\n\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=\"Average Flat Resale Price (psm) by Town for all room types in 2022 \", \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10))  \n\n\n\n\n\n\n\ntype <- \"3 ROOM\"\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town) %>% filter(flat_type==type)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=paste(\"Average Flat Resale Price (psm) by Town for\", str_replace(lapply(type, tolower), '_', '-'), \"flats\"), \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10))  \n\n\n\n\n\n\n\ntype <- \"4 ROOM\"\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town) %>% filter(flat_type==type)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=paste(\"Average Flat Resale Price (psm) by Town for\", str_replace(lapply(type, tolower), '_', '-'), \"flats\"), \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10)) \n\n\n\n\n\n\n\ntype <- \"5 ROOM\"\nSGResale_2022_bytown <- SGResale_2022_psqm %>% group_by(town) %>% filter(flat_type==type)\n\nggplot(SGResale_2022_bytown, aes(x=reorder(town, price_per_sqm), y=price_per_sqm)) +\n  geom_boxplot() +\n  labs(title=paste(\"Average Flat Resale Price (psm) by Town for\", str_replace(lapply(type, tolower), '_', '-'), \"flats\"), \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=10, hjust=0.5),\n        axis.title.x = element_text(size=10),\n        axis.text.x = element_text(angle=35, hjust=1),\n        axis.title.y = element_text(size=10)) \n\n\n\n\n\n\n\nOverall, we observe that the location and type of HDB flat greatly influences the resale price of the property. This is likely because HDB flats in certain parts of the city are more sought-after due to their proximity to amenities and other factors, while certain types of flats may be more desirable due to their size or layout. This is why prospective buyers should consider all these factors carefully before making a purchase."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "With the help of analysis visualisation techniques, we are to uncover the impact of COVID-19 and the global economic and political dynamics of 2022 on Singapore’s bi-lateral trade (i.e. import, export and trade balance)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#heatmap",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#heatmap",
    "title": "Take-home Exercise 4",
    "section": "4.1 Heatmap",
    "text": "4.1 Heatmap\nIn a calendar heatmap, colored cells show the number of events for each period of time. Heatmaps are used to identify seasonal patterns and anomalies in data and enable users to identify these patterns quickly. The heatmap uses colors and saturation to represent data values, so users can easily identify the high and low values based on color intensity in the heatmap.\n\n\n\nHere, we are plotting the total trade volume over the years & months.\n\n\n\n\n\nInsights\nWe observe the following:\n\nThe top 3 lowest trade volume happened in Apr - Jun 2020 –> This coincides with the economic slowdown in major economies and supply chain disruptions as well as the implementation of the circuit Breaker (CB) measures domestically from April to June 2020.\nSingapore trade volume continue to increase from Mar 2021 onwards due to relaxation of covid-restrictions. This is observed by green (high trade volumes) from Mar - Sep 2022. In Oct 2022, there is a slowdown due to recession.\n\n\n\n\n\n\nInsights\nWe observe the following:\n\nAcross all three years, Singapore exports more than it imports, which may be attributed to its strategic location.\nImports exceed exports in May 2022, resulting in a negative trade balance. The same pattern could be seen in April-August 2022 and October-December 2022. This could be because, as the United States enters a recession (Summer 2022 & Oct 2022), Singapore is not immune, and the world economy enters a slump, with fewer exports. While Singapore continues to import, which is understandable given the country’s scarcity of natural resources."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#trade-balance-of-singapore",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#trade-balance-of-singapore",
    "title": "Take-home Exercise 4",
    "section": "4.2 Trade Balance of Singapore",
    "text": "4.2 Trade Balance of Singapore\nThe difference between a country’s exports and imports for a certain period is known as the balance of trade (BOT). A country with a trade deficit imports more products and services than it exports in terms of value, whereas a country with a trade surplus exports more goods and services than it imports.\nWe utilize a horizon graph to show Singapore’s trade balance trend over the last three years, broken down by region. Each row represents a different country, with red representing a trade deficit and blue representing a trade surplus.\nInsights\nWe can examine the main importers/exporters and trading activities of trading partners over time. We also observe that there is less trading activity with countries in America and Europe. Singapore primarily trades in Asia Pacific, possibly due to proximity.\n\nIn Asia, we mostly export (blue) to Hong Kong, Indonesia, and Vietnam. We primarily import (red) from Malaysia and Taiwan.\nIn the United States, we mostly export (blue) to Guam and Puerto Rico. While we mostly import (red) from the United States, we also import from Brazil.\nIn Europe, we mostly export (blue) to the Netherlands and Greece. While we mostly import (red) from Italy, Spain, Sweden, Switzerland, and the United Kingdom. This could be because of free trade agreements with the European Union.\nWe mostly export to countries in Oceania.\n\nWhat is noteworthy about this analysis is that we observe that we often export to smaller countries while importing from larger countries. This could be due to Singapore’s many bilateral and regional FTAs including with Australia, China, Costa Rica, India, Japan, Jordan, New Zealand, Republic of Korea, Panama, Peru, Sri Lanka, European Union, United Kingdom and Turkey.\n::: panel-tabset"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#asia-1",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#asia-1",
    "title": "Take-home Exercise 4",
    "section": "Asia",
    "text": "Asia\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#america-1",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#america-1",
    "title": "Take-home Exercise 4",
    "section": "America",
    "text": "America"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#europe-1",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#europe-1",
    "title": "Take-home Exercise 4",
    "section": "Europe",
    "text": "Europe"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#oceania-1",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#oceania-1",
    "title": "Take-home Exercise 4",
    "section": "Oceania",
    "text": "Oceania"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#export-import-graphs",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#export-import-graphs",
    "title": "Take-home Exercise 4",
    "section": "4.3 Export-Import Graphs",
    "text": "4.3 Export-Import Graphs\nPlotting both export and import line into the same graph allows us to examine Singapore’s exports and imports easier over time. The user can easily determine whether each country’s trade activities are in surplus (green) or deficit (purple).\nInsights\nSingapore has experienced a trade surplus for the last three years, as shown in the green region, which is more than the purple area. The result is consistent with the trade summary from World Bank.org. This was also evident in the heatmap, which showed a low trade balance in May 2022. Trade activity falls sharply between February 2020 and December 2021. The drop in February 2020 was caused by Covid-19 shutdown restrictions and a standstill in global economic activity, during which the Singapore economy experienced both demand- and supply-side disruptions. Whereas the second drop in trade activity in December 2021 could be related to the uncertainty of Russia invading Ukraine. The decrease continued until February 2022, when the Russia-Ukraine war begin. On the other hand, imports and exports increased in March 2021 which could be due to easing of Covid restrictions.\nSimilar patterns can be found in different regions, as evidenced by the Trade Balance, where trade activity are lower in countries in America and higher in Asia. It’s worth noting that several countries had a mix of trade surpluses and trade deficits (e.g. Korea, China, US). For example, exports to China increased from July 2020 to April 2022, which might be linked to the pandemic and China’s strict zero covid policy, which delayed China’s opening and consequently lowered imports.\n\nOverallAsiaAmericaEuropeOceania\n\n\n\n\n`geom_braid()` using method = 'line'\n\n\n\n\n\n\n\n\n\n`geom_braid()` using method = 'line'\n\n\n\n\n\n\n\n\n\n`geom_braid()` using method = 'line'\n\n\n\n\n\n\n\n\n\n`geom_braid()` using method = 'line'\n\n\n\n\n\n\n\n\n\n`geom_braid()` using method = 'line'"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#slopegraph-4",
    "href": "Take-Home_Ex/Take-Home_Ex04/Take-Home_Ex04_old.html#slopegraph-4",
    "title": "Take-home Exercise 4",
    "section": "4.3 SlopeGraph",
    "text": "4.3 SlopeGraph\nThe Slopegraph depicts the year-on-year trend of these countries’ total trade balance with Singapore. It is more intuitive for users as the slope-up/slope-down of the lines shows the increase/decrease in trade balance. Here we are only plotting the top 15 trade volume in each region.\nIn Asia, we can see that Hong Kong remains the top exporter of Singapore year on year (increasing trend). While Taiwan remains the top importer of Singapore year on year (decreasing trend).\n\nAsiaAmericaEuropeOceania"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08.html",
    "href": "In-class_Ex/In-class_Ex08.html",
    "title": "In-class_Ex08",
    "section": "",
    "text": "Loading packages and data\nCode chunk:\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\n\nRows: 54 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): label, Department, Title\ndbl (1): id\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\nRows: 9063 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): SentDate, Subject, MainSubject, sourceLabel, targetLabel\ndbl  (2): source, target\ntime (1): SentTime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Wrangling\n\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'source', 'target'. You can override using\nthe `.groups` argument.\n\n\n\n\nCreate network objects\n\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# … with 1,366 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# … with 51 more rows\n\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\nUsing \"stress\" as default layout\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\n\ng <- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\nFacet weekdays\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\n\ng <- GAStech_graph %>%\n  mutate(betweenness_centrality = centrality_betweenness()) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\n\ng <- GAStech_graph %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\n\ng <- GAStech_graph %>%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\nWarning in cluster_edge_betweenness(graph = .G(), weights = weights, directed =\ndirected): At core/community/edge_betweenness.c:492 : Membership vector will be\nselected based on the highest modularity score.\n\n\nWarning in cluster_edge_betweenness(graph = .G(), weights = weights, directed\n= directed): At core/community/edge_betweenness.c:497 : Modularity calculation\nwith weighted edge betweenness community detection might not make sense --\nmodularity treats edge weights as similarities while edge betwenness treats them\nas distances.\n\ng + theme_graph()\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\n\n\nInteractive Network graph\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n()) %>%\n  filter(from!=to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'from'. You can override using the\n`.groups` argument.\n\n\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "Load the packages\n\n\n\n\n\nLoad the dataset\n\n\nNew names:\nRows: 46 Columns: 7\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): Name, symbol, country dbl (4): ...1, Rank, marketcap, price..USD.\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n\n\n\n\nWarning: x = 'RW0U.SI', get = 'stock.prices': Error in getSymbols.yahoo(Symbols = \"RW0U.SI\", env = <environment>, verbose = FALSE, : Unable to import \"RW0U.SI\".\nRW0U.SI download failed after two attempts. Error message:\nHTTP error 404.\n Removing RW0U.SI.\n\n\n\n\nPlot a horizontal graph\n\nStock40_daily %>% \n  ggplot() +\n  geom_horizon(aes(x = date, y=adjusted), origin = \"midpoint\", horizonscale = 6)+\n  facet_grid(symbol~.)+\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n  scale_x_date(expand=c(0,0), date_breaks = \"1 month\", date_labels = \"%b%y\") +\n  ggtitle('Daily Adjusted Prices (Jan 2020 to Mar 2022)') \n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\n\n\nHorizontal graph makeover\n\nStock40_daily <- Stock40_daily %>%\n  left_join(company) %>%\n  select(1:8, 11:12)\n\nJoining, by = \"symbol\"\n\n\n\nStock40_daily %>% \n  ggplot() +\n  geom_horizon(aes(x = date, y=adjusted), origin = \"midpoint\", horizonscale = 6)+\n  facet_grid(Name~.)+ #<<\n  geom_vline(xintercept = as.Date(\"2020-03-11\"), colour = \"grey15\", linetype = \"dashed\", size = 0.5)+ #<<\n  geom_vline(xintercept = as.Date(\"2020-12-14\"), colour = \"grey15\", linetype = \"dashed\", size = 0.5)+ #<<\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"),\n        strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n  scale_x_date(expand=c(0,0), date_breaks = \"1 month\", date_labels = \"%b%y\") +\n  ggtitle('Daily Adjusted Prices (Jan 2020 to Mar 2022)') \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\nPlotting Stock Price Line Graph\n\nDBS Group\n\nStock40_daily %>%\n  filter(symbol == \"DBSDF\") %>%\n  ggplot(aes(x = date, y = close)) +\n    geom_line() +\n    labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\", \n         y = \"Closing Price\", x = \"\") + \n    theme_tq()\n\n\n\n\n\n\n\nPlotting interactive stock price line graphs\nTo do comparison across different stocks. Hover it will be interactive.\n\nselected_stocks <-  Stock40_daily %>%\n  filter (`symbol` == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"))\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\nWarning in symbol == c(\"C09.SI\", \"SINGF\", \"SNGNF\", \"C52.SI\"): longer object\nlength is not a multiple of shorter object length\n\n\n\np <- ggplot(selected_stocks, \n            aes(x = date, y = adjusted)) + \n  scale_y_continuous() +\n  geom_line() +\n  facet_wrap(~Name, scales = \"free_y\",) +\n  theme_tq() +\n  labs(title = \"Daily stock prices of selected weak stocks\", \n       x = \"\", y = \"Adjusted Price\") + \n  theme(axis.text.x = element_text(size = 6), \n        axis.text.y = element_text(size = 6))\n\nggplotly(p)\n\n\n\n\n\n\n\nPlotting Candlestick Chart\n\nend <- as_date(\"2022-03-31\")\n\n\nStock40_daily %>%\n  filter(symbol == \"DBSDF\") %>%\n  ggplot(aes(\n    x = date, y = close)) +\n  geom_candlestick(aes(\n    open = open, high = high, \n    low = low, close = close)) +\n  geom_line(size = 0.5)+\n    coord_x_date(xlim = c(end - weeks(12), \n                          end),\n                 ylim = c(20, 35),\n                 expand = TRUE) +\n  labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\", \n       y = \"Closing Price\", x = \"\") + \n  theme_tq()\n\nWarning: The following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\nPlotting candlestick chart and MA lines\n\nStock40_daily %>%\n  filter(symbol == \"DBSDF\") %>%\n  ggplot(aes(\n    x = date, y = close)) +\n  geom_candlestick(aes(\n    open = open, high = high, \n    low = low, close = close)) +\n  geom_line(size = 0.5)+\n  geom_ma(color = \"darkgreen\", n = 20) +\n  geom_ma(color = \"lightgreen\", n = 5) + \n    coord_x_date(xlim = c(end - weeks(12), \n                          end),\n                 ylim = c(20, 35),\n                 expand = TRUE) +\n  labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\",\n       subtitle = \"darkgreen = 1-day MA, lightgreen = 5-day MA\",\n       y = \"Closing Price\", x = \"\") + \n  theme_tq()\n\nWarning: The following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\nPlotting Bollinger Bands\n\nStock40_daily %>%\n  filter(symbol == \"DBSDF\") %>% \n  ggplot(aes(x=date, y=close))+\n  geom_line(size=0.5)+\n  geom_bbands(aes(\n    high = high, low = low, close = close), \n    ma_fun = SMA, sd = 2, n = 20,\n    size = 0.75, color_ma = \"royalblue4\", \n    color_bands = \"red1\")+\n    coord_x_date(xlim = c(\"2020-02-01\", \n                          \"2022-03-31\"), \n                 expand = TRUE)+\n    labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\",\n         subtitle = \"dotted red lines = bollinger bands\",\n         x = \"Date\", y =\"Price\") +\ntheme(legend.position=\"none\")\n\nWarning: The following aesthetics were dropped during statistical transformation: high,\nlow, close, y\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: high,\nlow, close\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\nPlotting Interactive Candlesticks Chart\n\ncandleStick_plot<-function(symbol, from, to){\n  tq_get(symbol, from = from, to = to, warnings = FALSE) %>% \n    mutate(greenRed=ifelse(open-close>0, \"Red\", \"Green\")) %>% \n    ggplot()+\n    geom_segment(\n      aes(x = date, xend=date, y =open, yend =close, colour=greenRed), \n      size=3)+\n    theme_tq()+\n    geom_segment(\n      aes(x = date, xend=date, y =high, yend =low, colour=greenRed))+\n    scale_color_manual(values=c(\"ForestGreen\",\"Red\"))+\n    ggtitle(paste0(symbol,\" (\",from,\" - \",to,\")\"))+\n    theme(legend.position =\"none\",\n          axis.title.y = element_blank(),\n          axis.title.x=element_blank(),\n          axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),\n          plot.title= element_text(hjust=0.5))\n}\n\n\np <- candleStick_plot(\"DBSDF\",\n                      from = '2022-01-01',\n                      to = today())\nggplotly(p)"
  }
]